<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Bus Tracking Map</title>
    <link
      rel="stylesheet"
      href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css"
      integrity="sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI="
      crossorigin=""
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/leaflet-routing-machine/dist/leaflet-routing-machine.css"
    />
    <script
      src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"
      integrity="sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM="
      crossorigin=""
    ></script>
    <script src="https://cdn.jsdelivr.net/npm/leaflet-routing-machine/dist/leaflet-routing-machine.js"></script>
  </head>
  <style>
    #map {
      height: 500px;
    }
  </style>
  <body>
    <div id="map"></div>
    <form id="destination-form">
      <label for="lat">Latitude:</label>
      <input type="text" id="lat" name="lat" placeholder="Enter latitude" />
      <label for="lng">Longitude:</label>
      <input type="text" id="lng" name="lng" placeholder="Enter longitude" />
      <button type="submit">Set Destination</button>
    </form>

    <script>
      const map = L.map("map").setView([51.505, -0.09], 13);
      L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png", {
        maxZoom: 19,
        attribution:
          'Â© <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>',
      }).addTo(map);

      // Define a bus route as an array of coordinates [latitude, longitude]
      const busRoute = [
        [51.505, -0.09],
        [51.51, -0.1],
        [51.51, -0.12],
        [51.505, -0.15],
        [51.502, -0.155],
      ];

      let polyline = L.polyline(busRoute, { color: "blue" }).addTo(map); // Add polyline for bus route

      // Function to update bus location marker
      function updateBusLocation(lat, lng) {
        if (busMarker) {
          busMarker.setLatLng([lat, lng]);
        } else {
          busMarker = L.marker([lat, lng]).addTo(map);
        }
      }

      // Function to get the current location
      function getCurrentLocation() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(
            (position) => {
              const { latitude, longitude } = position.coords;
              updateBusLocation(latitude, longitude);
              map.setView([latitude, longitude], 13); // Set map view to current location
            },
            (error) => {
              console.error("Error getting current location:", error);
            }
          );
        } else {
          console.error("Geolocation is not supported by this browser.");
        }
      }

      // Fetch current location initially
      getCurrentLocation();

      let busMarker;

      // Handle form submission
      document
        .getElementById("destination-form")
        .addEventListener("submit", function (event) {
          event.preventDefault();
          const lat = parseFloat(document.getElementById("lat").value);
          const lng = parseFloat(document.getElementById("lng").value);
          if (!isNaN(lat) && !isNaN(lng)) {
            // Remove previous routing control, if any
            map.eachLayer(function (layer) {
              if (layer instanceof L.Routing.Control) {
                map.removeControl(layer);
              }
            });

            // Add new routing control with updated destination
            L.Routing.control({
              waypoints: [
                L.latLng(busMarker.getLatLng()), // Start point (current location)
                L.latLng(lat, lng), // Destination point
              ],
              routeWhileDragging: true,
            }).addTo(map);
          } else {
            alert("Please enter valid latitude and longitude values.");
          }
        });
    </script>
  </body>
</html>
